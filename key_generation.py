from cryptography.fernet import Fernet
import base64
import os
from random import choice
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC


class KeyGen:
    def __init__(self):
        self.f_direct_key = None
        self.random_size = None
        self.salt = None
        self.new_password = None
        self.new_salt = None
        self.f_key_with_pass = None
        self.new_user_password = None
        self.new_key = None

    # Generating keys without using password.  Not recommended.
    def key_generate(self):
        self.f_direct_key = Fernet.generate_key()
        with open('f_file_key.key', mode='wb') as f_file:
            f_file.write(self.f_direct_key)  # The key is type bytes.

    # Read key that got generated by Fernet
    def read_key(self):
        if os.path.exists('f_file_key.key'):
            with open('f_file_key.key', mode='rb') as f_file:
                self.f_direct_key = f_file.read()  # The key is type bytes.
                return self.f_direct_key

    # Generating keys with using password
    def generating_salt(self):
        self.random_size = choice(range(16, 25))
        self.salt = os.urandom(self.random_size)
        return self.salt

    def password_required(self, password, salt):
        self.new_password = password.encode()  # Convert to type bytes.
        self.new_salt = salt
        kdf = PBKDF2HMAC(
            algorithm=hashes.SHA256(),
            length=32,
            salt=self.new_salt,
            iterations=100000,
            backend=default_backend()
        )
        self.f_key_with_pass = base64.urlsafe_b64encode(kdf.derive(self.new_password))  # Can only use kdf once
        return self.f_key_with_pass

    def automate_key_generation_using_password_and_salt(self, user_password):
        self.new_user_password = user_password
        self.new_salt = self.generating_salt()
        self.new_key = self.password_required(password=self.new_user_password, salt=self.new_salt)
        with open('f_file_key.key', mode='wb') as f_file_key:
            f_file_key.write(self.new_key)

    def main(self):
        user_password = input(f'Please enter a master password: >> ')
        self.automate_key_generation_using_password_and_salt(user_password=user_password)


if __name__ == '__main__':
    new_main = KeyGen()
    new_main.main()
